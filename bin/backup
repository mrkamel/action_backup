#!/usr/bin/ruby

BACKUP_ROOT = File.expand_path("../..", __FILE__)
BACKUP_TIME = Time.now

require "bundler/setup"
require "stringio"
require "fileutils"
require "date"
require "thor"
require File.join(BACKUP_ROOT, "config/mailer.rb")

Dir[File.join(BACKUP_ROOT, "lib", "*.rb")].each { |file| require file }
Dir[File.join(BACKUP_ROOT, "helpers", "*.rb")].each { |file| require file }

# execute backup tasks

def execute_tasks(dir, only)
  Dir[File.join(BACKUP_ROOT, dir, "*.rb")].sort.each do |file|
    relative_path = File.join(dir, File.basename(file))

    # if ONLY is set up, execute task only if listed in ONLY

    if only.empty? || only.include?(relative_path)
      puts
      puts relative_path
      puts "-" * relative_path.length
      puts
      puts Time.now
      puts

      begin
        require file
      rescue Exception => e
        puts "Backup Task #{relative_path} failed:"
        puts e
        puts e.backtrace
      end

      puts
      puts Time.now
      puts
    end
  end
end

class Cli < Thor
  desc "exec", "Run all or only specified backup tasks"

  option :only, banner: "backup/run/task1,backup/run/task2"

  def exec
    only = options.only.to_s.s.split(",")

    # let stdout and stderr write into string io

    sio = StringIO.new
    $stderr = sio
    $stdout = sio

    execute_tasks "backup/up", only: only
    execute_tasks "backup/run", only: only

    report = Report.new
    report.body = sio.string
    report.deliver

    execute_tasks "backup/down", only
  end
end

Cli.start ARGV

