#!/usr/bin/ruby

BACKUP_ROOT = File.expand_path("../..", __FILE__)

BACKUP_TIME = Time.now

# parse command line arguments

ARGV.each { |arg| ENV[$1] = $2 if arg =~ /^([^=]+)=(.*)$/ }

# requirements

require "rubygems"
require "bundler/setup"
require "stringio"
require "fileutils"
require "date"
require File.join(BACKUP_ROOT, "config/mailer.rb")

Dir[File.join(BACKUP_ROOT, "lib", "*.rb")].each { |file| require file }
Dir[File.join(BACKUP_ROOT, "helpers", "*.rb")].each { |file| require file }

# read ONLY command line argument

ONLY = ENV["ONLY"].to_s.split(",")

# let stdout and stderr write into string io

sio = StringIO.new
$stderr = sio
$stdout = sio

# execute backup tasks

def execute_tasks(dir)
  Dir[File.join(BACKUP_ROOT, dir, "*.rb")].sort.each do |file|
    relative_path = File.join(dir, File.basename(file))

    # if ONLY is set up, execute task only if listed in ONLY

    if ONLY.empty? || ONLY.include?(relative_path)
      puts
      puts relative_path
      puts "-" * relative_path.length
      puts
      puts Time.now
      puts

      begin
        require file
      rescue Exception => e
        puts "Backup Task #{relative_path} failed:"
        puts e
        puts e.backtrace
      end

      puts
      puts Time.now
      puts
    end
  end
end

execute_tasks "backup/up"
execute_tasks "backup/run"

report = Report.new
report.body = sio.string
report.deliver

execute_tasks "backup/down"

